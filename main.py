from fastapi import FastAPI, Request
from models.query_request import QueryRequest
from services.telegram_service import send_telegram_message, send_typing_action
from services.rag_service import get_qa_chain
from utils.load_env import load_environment_variables
import uvicorn
from services.database_service import create_database
import os

# Starta om Chroma om db/ saknas
if not os.path.exists("db") or not os.listdir("db"):
    print("üõ†Ô∏è Ingen db hittades, bygger om...")
    create_database()
else:
    print("‚úÖ db/ hittades, forts√§tter...")

# Ladda milj√∂variabler
load_environment_variables()

# Initiera FastAPI och QA-chain
app = FastAPI()
qa_chain = get_qa_chain()

@app.post("/query")
async def query_endpoint(request: QueryRequest):
    result = qa_chain({"query": request.query})
    return {
        "answer": result["result"],
        "sources": [doc.page_content for doc in result["source_documents"]]
    }

@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    print("Telegram-meddelande mottaget:", body)

    try:
        chat_id = body["message"]["chat"]["id"]
        message_text = body["message"]["text"].strip().lower()

        print(f"Anv√§ndaren skrev: {message_text}")

        send_typing_action(chat_id)

        if message_text == "/start":
            welcome_message = (
                "Hej! üëã Jag √§r din utbildningsassistent.\n\n"
                "St√§ll en fr√•ga om k√§llkritik, eller skriv /exercise f√∂r att f√• en √∂vning!\n"
                "Anv√§nd /help om du vill veta vad jag kan g√∂ra."
            )
            send_telegram_message(chat_id, welcome_message)

        elif message_text == "/help":
            help_message = (
                "üìö H√§r √§r vad jag kan hj√§lpa dig med:\n"
                "- St√§ll vanliga fr√•gor om k√§llkritik.\n"
                "- Skriv /exercise f√∂r att f√• en √∂vningsuppgift.\n"
                "- Skriv /start f√∂r att se detta meddelande igen.\n"
                "\n"
                "Bara fr√•ga p√•! üöÄ"
            )
            send_telegram_message(chat_id, help_message)

        elif message_text == "/exercise":
            exercise_prompt = (
                "Skapa en enkel √∂vningsuppgift baserad p√• utbildningsmaterialet om k√§llkritik. "
                "Formulera en liten fr√•gest√§llning eller en praktisk uppgift anv√§ndaren kan g√∂ra."
            )
            exercise_response = qa_chain.invoke({"query": exercise_prompt})
            exercise = exercise_response["result"]

            send_telegram_message(chat_id, f"üìù √ñvning:\n\n{exercise}")

        else:
            # Vanlig fr√•ga till RAG
            response = qa_chain.invoke({"query": message_text})
            answer = response["result"]

            print(f"Svar fr√•n RAG: {answer}")

            send_telegram_message(chat_id, answer)

        return {"status": "Message processed"}

    except Exception as e:
        print("Fel vid hantering av Telegram-meddelande:", str(e))
        return {"status": "error", "message": str(e)}

# K√∂r lokalt
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
